/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.CarDirectory;
import Business.Car;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.regex.Pattern;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JAINHEMANT
 */
public class ViewCarJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewCarJPanel
     */
    private Car selectedCarSave;
    ButtonGroup grp;
    private int error;

    private CarDirectory reserveDirectory;
    private CarDirectory carDirectory;
    private JPanel rightPanel;

    private String[] choose = new String[11];

    public ViewCarJPanel(JPanel rightPanel, CarDirectory carDirectory) {
        initComponents();
        this.carDirectory = carDirectory;
        this.rightPanel = rightPanel;
        reserveDirectory = carDirectory;
        grp = new ButtonGroup();
        grp.add(availableRadiobtn);
        grp.add(unavailableRadiobtn);
        
        carDirectory.addCarList(new Car("Accord","1121","123456789","Honda","12-20-2011",true,1,4,"Boston","12-13-2019"));
        carDirectory.addCarList(new Car("RAV4","11","123987654","Toyota","19-20-2011",false,2,4,"New York","11-12-2025"));
        carDirectory.addCarList(new Car("X1","11","123987654","BMW","19-20-2004",false,2,4,"Penn State","11-12-2019"));
        carDirectory.addCarList(new Car("E1","1121","123456789","Mercedes","12-20-2005",true,1,4,"Boston","12-13-2018"));
        carDirectory.addCarList(new Car("X2","11","12345","BMW","19-20-2006",false,2,4,"New Jersey","11-12-2015"));
        carDirectory.addCarList(new Car("S1","1121","123456","Lamborghini","12-20-2007",true,1,4,"Texas","12-13-2013"));
        carDirectory.addCarList(new Car("A1","1121","653981","Hyundai","12-20-2008",true,1,4,"Tenesse","12-13-2019"));
        carDirectory.addCarList(new Car("RAV10","11","123987654","Toyota","19-20-2009",false,2,4,"California","11-12-2025"));
        carDirectory.addCarList(new Car("A2","11","789564","Hyundai","19-20-2012",false,2,4,"Washington","06-06-2026"));
        carDirectory.addCarList(new Car("T2","1121","123456789","Tesla","12-20-2016",true,1,4,"Florida","07-08-2013"));
        carDirectory.addCarList(new Car("A3","11","123987654","Hyundai","19-20-2019",false,2,4,"Ohio","01-02-2012"));
        carDirectory.addCarList(new Car("T1","1121","123456789","Tesla","01-01-2014",true,1,4,"Arlington","01-01-2008"));

        choose[0] = "First Available Passenger Car";
        choose[1] = "Currently Available Cars";
        choose[2] = "Currently Unavailable Cars";
        choose[3] = "Cars Manufactured By Company ___________";
        choose[4] = "Cars Manufactured in the Year ________";
        choose[5] = "Available Car With Minimum='x' and Maximum<'y' Seats";
        choose[6] = "Find Car with Serial Number";
        choose[7] = "List of Cars for the Model Number________";
        
        choose[8] = "Cars Manufacturer used by Uber";
        choose[9] = "Cars Available in City _________";
        choose[10] = "Cars with Expired Maintanence Certificate";

        populateTable(carDirectory);
        populateFilterTable();
    }

    private void populateFilterTable() {

        DefaultTableModel dtM = (DefaultTableModel) filterJTable.getModel();
        for (String str : choose) {
            Object[] row = new Object[1];
            row[0] = str;
            dtM.addRow(row);

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane1 = new javax.swing.JScrollPane();
        displayCarJTable = new javax.swing.JTable();
        scrollPane2 = new javax.swing.JScrollPane();
        filterJTable = new javax.swing.JTable();
        resetbtn = new javax.swing.JButton();
        fliterbtn = new javax.swing.JButton();
        attr1txt = new javax.swing.JTextField();
        attr2txt = new javax.swing.JTextField();
        displaybtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        modelNametxt = new javax.swing.JTextField();
        modelNotxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        availableCitytxt = new javax.swing.JTextField();
        minimumSeattxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        manufacturertxt = new javax.swing.JTextField();
        manufacturerYeartxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        serialNotxt = new javax.swing.JTextField();
        maximumSeattxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        maintainenceCerttxt = new javax.swing.JTextField();
        availableRadiobtn = new javax.swing.JRadioButton();
        unavailableRadiobtn = new javax.swing.JRadioButton();
        updatebtn = new javax.swing.JButton();
        lastUpdatedLabel = new javax.swing.JLabel();
        lastUpdatedtxtfield = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        carAttributesLabel = new javax.swing.JLabel();

        displayCarJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Car Model", "Availability"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        displayCarJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                displayCarJTableMouseClicked(evt);
            }
        });
        scrollPane1.setViewportView(displayCarJTable);
        if (displayCarJTable.getColumnModel().getColumnCount() > 0) {
            displayCarJTable.getColumnModel().getColumn(0).setResizable(false);
            displayCarJTable.getColumnModel().getColumn(1).setResizable(false);
        }

        filterJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Select the Filter"
            }
        ));
        filterJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filterJTableMouseClicked(evt);
            }
        });
        scrollPane2.setViewportView(filterJTable);

        resetbtn.setText("Reset");
        resetbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetbtnActionPerformed(evt);
            }
        });

        fliterbtn.setText("Fliter");
        fliterbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fliterbtnActionPerformed(evt);
            }
        });

        attr1txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attr1txtActionPerformed(evt);
            }
        });

        attr2txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attr2txtActionPerformed(evt);
            }
        });

        displaybtn.setText("Display");
        displaybtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displaybtnActionPerformed(evt);
            }
        });

        jLabel2.setText("ModelName");

        modelNametxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelNametxtActionPerformed(evt);
            }
        });

        jLabel3.setText("ModelNo");

        jLabel4.setText("AvailableCity");

        jLabel5.setText("Minimum Seat");

        jLabel6.setText("Manufacturer");

        manufacturertxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manufacturertxtActionPerformed(evt);
            }
        });

        manufacturerYeartxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manufacturerYeartxtActionPerformed(evt);
            }
        });

        jLabel7.setText("Manufacturer Year");

        jLabel8.setText("SerialNo");

        serialNotxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serialNotxtActionPerformed(evt);
            }
        });

        maximumSeattxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maximumSeattxtActionPerformed(evt);
            }
        });

        jLabel9.setText("Maximum Seat");

        jLabel10.setText("Maintainence Certificate Expiry Date");

        availableRadiobtn.setText("Available");

        unavailableRadiobtn.setText("Unavailable");

        updatebtn.setText("Update");
        updatebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatebtnActionPerformed(evt);
            }
        });

        lastUpdatedLabel.setText("Last Updated Time :");

        lastUpdatedtxtfield.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        carAttributesLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        carAttributesLabel.setText("Car Attributes");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(scrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(111, 111, 111))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lastUpdatedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(lastUpdatedtxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(attr2txt)
                            .addComponent(attr1txt, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(displaybtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(statusLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(resetbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(fliterbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(carAttributesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel8))
                                    .addGap(28, 28, 28)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(manufacturerYeartxt, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(manufacturertxt, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(serialNotxt, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(maximumSeattxt, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(15, 15, 15))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel2))
                                    .addGap(43, 43, 43)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(modelNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(modelNotxt, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(availableCitytxt, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(minimumSeattxt, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(maintainenceCerttxt, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(37, 37, 37)
                                    .addComponent(availableRadiobtn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(unavailableRadiobtn, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(158, 158, 158)
                                    .addComponent(updatebtn)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 184, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(displaybtn)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lastUpdatedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastUpdatedtxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(attr1txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(attr2txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(resetbtn)
                            .addComponent(fliterbtn))))
                .addGap(18, 18, 18)
                .addComponent(carAttributesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(modelNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(modelNotxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(availableCitytxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(minimumSeattxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(manufacturertxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(manufacturerYeartxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(serialNotxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(maximumSeattxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maintainenceCerttxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(availableRadiobtn)
                            .addComponent(unavailableRadiobtn))
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(updatebtn))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void modelNametxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelNametxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_modelNametxtActionPerformed

    private void manufacturertxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manufacturertxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_manufacturertxtActionPerformed

    private void manufacturerYeartxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manufacturerYeartxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_manufacturerYeartxtActionPerformed

    private void serialNotxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serialNotxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serialNotxtActionPerformed

    private void maximumSeattxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maximumSeattxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maximumSeattxtActionPerformed

    private void displaybtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displaybtnActionPerformed
        displayUpdate();

    }//GEN-LAST:event_displaybtnActionPerformed

    private void resetbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetbtnActionPerformed
        this.carDirectory = reserveDirectory;
        populateTable(this.carDirectory);


    }//GEN-LAST:event_resetbtnActionPerformed

    private void fliterbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fliterbtnActionPerformed
        // TODO add your handling code here:

        int selectedRow = filterJTable.getSelectedRow();

        switch (selectedRow) {
            case 0:
                firstAvailPassCar();
                break;
            case 1:
                currentAvailCars();
                break;
            case 2:
                currentUnAvailCars();
                break;
            case 3: {
                carsByCompany(attr1txt.getText());
                break;
            }
            case 4:
                carsManufYear(attr1txt.getText());
                break;
            case 5:
                minMaxSeat(Integer.parseInt(attr1txt.getText()), Integer.parseInt(attr2txt.getText()));
                break;
            case 6:
                carSerNo(attr1txt.getText());
                break;
            case 7:
                carsByModelNumber(attr1txt.getText());
                break;
            case 8:
                carsByManufacturer();
                break;
            case 9:
                carsInCity(attr1txt.getText());
                break;
            case 10:
                carsWithExpiredCert();
                break;
        }

    }//GEN-LAST:event_fliterbtnActionPerformed

    private void updatebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatebtnActionPerformed
        // TODO add your handling code here:
        int row = displayCarJTable.getSelectedRow();
        selectedCarSave = (Car) displayCarJTable.getValueAt(row, 0);
        Car updCar = selectedCarSave;

        updateAction(updCar);

    }//GEN-LAST:event_updatebtnActionPerformed

    private void attr1txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attr1txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_attr1txtActionPerformed

    private void attr2txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attr2txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_attr2txtActionPerformed

    // Called-back when a mouse button has been clicked in the filterJTable to enable and disable the attr1txt and attr2txt textfield values(pressed followed by released) on the source
    private void filterJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filterJTableMouseClicked
        // TODO add your handling code here:
        int selectedRow= filterJTable.getSelectedRow();
        
        switch(selectedRow)
        {
            case 0: {
                    attr1txt.setEnabled(false);
                    attr2txt.setEnabled(false);
                    break;
                    }
            case 1: {
                    attr1txt.setEnabled(false);
                    attr2txt.setEnabled(false);
                    break;
                    }
            case 2: {
                    attr1txt.setEnabled(false);
                    attr2txt.setEnabled(false);
                    break;
                    }
            case 3: {
                    attr1txt.setEnabled(true);
                    attr2txt.setEnabled(false);
                    break;
                    }
            case 4: {
                    attr1txt.setEnabled(true);
                    attr2txt.setEnabled(false);
                    break;
                    }
            case 5: {
                    attr1txt.setEnabled(true);
                    attr2txt.setEnabled(true);
                    break;
                    }
            case 6: {
                    attr1txt.setEnabled(true);
                    attr2txt.setEnabled(false);
                    break;
                    }
            case 7: {
                    attr1txt.setEnabled(true);
                    attr2txt.setEnabled(false);
                    break;
                    }
            case 8: {
                    attr1txt.setEnabled(true);
                    attr2txt.setEnabled(false);
                    break;
                    }
            case 9: {
                    attr1txt.setEnabled(true);
                    attr2txt.setEnabled(false);
                    break;
                    }
            case 10:{
                    attr1txt.setEnabled(false);
                    attr2txt.setEnabled(false);
                    break;
                    }
        }
        
        
    }//GEN-LAST:event_filterJTableMouseClicked

    private void displayCarJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayCarJTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_displayCarJTableMouseClicked
    private void updateAction(Car car) {

        error = 0;
        String modNa = modelNametxt.getText();
        String modNum = modelNotxt.getText();
        String availCity = availableCitytxt.getText();
        String manufac = manufacturertxt.getText();
        String manufacyr = manufacturerYeartxt.getText();
        String serialNum = serialNotxt.getText();
        String maxiseat = maximumSeattxt.getText();
        String miniseat = minimumSeattxt.getText();
        String maintaincert = maintainenceCerttxt.getText();
        Boolean avail;

        if (grp.getSelection() == availableRadiobtn.getModel())
        {
            avail = true;
        } else {
            avail = false;
        }
        
         //Pending with the validation code
        
       integerCheck(modNum, "Model Number");
        stringCheck(modNa, "Model Name");
        stringCheck(manufac, "Manufacturer");
      
        stringCheck(availCity, "Available City");
       
        integerCheck(serialNum, "Serial Number");
        integerCheck(maxiseat, "Maximum Seat");
        integerCheck(miniseat, "Minimum Seat");

     
        
        
        if (Integer.parseInt(miniseat) > Integer.parseInt(maxiseat)) {
            error = 1;
            JOptionPane.showMessageDialog(null, "Maximum Seat Should be more than Minimum seat", "Error", 0);
        }

        if (error != 1) {
            car.setModelName(modNa);
            car.setModelNo(modNum);
            car.setAvailableCity(availCity);
            car.setManufacturer(manufac);
            car.setManufactureyear(manufacyr);
            car.setSerialNo(serialNum);
            car.setMaintainCert(maintaincert);
            car.setMaxSeat(Integer.parseInt(maxiseat));
            car.setMinSeat(Integer.parseInt(miniseat));
            car.setAvailability(avail);

            JOptionPane.showMessageDialog(null, "Data Entry recorded successfully");
            populateTable(this.carDirectory);

            selectedCarSave = new Car();

        }
    }

    private void displayUpdate() {

        int selectedRow = displayCarJTable.getSelectedRow();

        if (selectedRow >= 0) {
            Car car = (Car) displayCarJTable.getValueAt(selectedRow, 0);
            modelNametxt.setText(car.getModelName());
            modelNotxt.setText(car.getModelNo());
            minimumSeattxt.setText(Integer.toString(car.getMinSeat()));
            maximumSeattxt.setText(Integer.toString(car.getMaxSeat()));
            manufacturertxt.setText(car.getManufacturer());
            manufacturerYeartxt.setText(car.getManufactureyear());
            availableCitytxt.setText(car.getAvailableCity());
            maintainenceCerttxt.setText(car.getMaintainCert());
            serialNotxt.setText(car.getSerialNo());

            boolean avail = car.getAvailability();
            if (avail) {
                availableRadiobtn.setSelected(true);
            } else {
                unavailableRadiobtn.setSelected(true);
            }

            selectedCarSave = car;
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to display");
        }

    }

    private void populateTable(CarDirectory carDirectory) {

        DefaultTableModel dtm = (DefaultTableModel) displayCarJTable.getModel();
        dtm.setRowCount(0);
        System.out.println("populateTable");
        for (Car c : carDirectory.getCarList()) {
            Object[] row = new Object[2];
            row[0] = c;
            row[1] = c.getAvailability();
            dtm.addRow(row);

        }
        lastUpdatedtxtfield.setText(carDirectory.getDate());

        modelNametxt.setText("");
        modelNotxt.setText("");
        availableCitytxt.setText("");
        manufacturerYeartxt.setText("");
        manufacturertxt.setText("");
        maintainenceCerttxt.setText("");
        minimumSeattxt.setText("");
        maximumSeattxt.setText("");
        serialNotxt.setText("");
        statusLabel.setText("");

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField attr1txt;
    private javax.swing.JTextField attr2txt;
    private javax.swing.JTextField availableCitytxt;
    private javax.swing.JRadioButton availableRadiobtn;
    private javax.swing.JLabel carAttributesLabel;
    private javax.swing.JTable displayCarJTable;
    private javax.swing.JButton displaybtn;
    private javax.swing.JTable filterJTable;
    private javax.swing.JButton fliterbtn;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lastUpdatedLabel;
    private javax.swing.JLabel lastUpdatedtxtfield;
    private javax.swing.JTextField maintainenceCerttxt;
    private javax.swing.JTextField manufacturerYeartxt;
    private javax.swing.JTextField manufacturertxt;
    private javax.swing.JTextField maximumSeattxt;
    private javax.swing.JTextField minimumSeattxt;
    private javax.swing.JTextField modelNametxt;
    private javax.swing.JTextField modelNotxt;
    private javax.swing.JButton resetbtn;
    private javax.swing.JScrollPane scrollPane1;
    private javax.swing.JScrollPane scrollPane2;
    private javax.swing.JTextField serialNotxt;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JRadioButton unavailableRadiobtn;
    private javax.swing.JButton updatebtn;
    // End of variables declaration//GEN-END:variables

    private void firstAvailPassCar() {
        System.out.println("First Available Car");
        CarDirectory cda = new CarDirectory();
        for (Car c : carDirectory.getCarList()) {
            if (c.getAvailability() == true) {
                cda.addCarList(c);
                break;
            }

        }
        carDirectory = cda;

        populateTable(carDirectory);
        statusLabel.setText("");
    }

    private void currentAvailCars() {

        int count = 0;
        CarDirectory cda = new CarDirectory();
        for (Car c : carDirectory.getCarList()) {
            {
                if (c.getAvailability() == true) {
                    cda.addCarList(c);
                    count++;
                }

            }
            carDirectory = cda;
            populateTable(carDirectory);
            statusLabel.setText("Available Cars: " + count);
        }
    }

    private void currentUnAvailCars() {
        int count = 0;
        CarDirectory cda = new CarDirectory();
        for (Car c : carDirectory.getCarList()) {
            
                if (c.getAvailability() == false) {
                    cda.addCarList(c);
                    count++;
                }

            
            carDirectory = cda;
            populateTable(carDirectory);
            statusLabel.setText("Unavailable Cars: " + count);
        
    }
    }
    private void carsByCompany(String company) {

        CarDirectory cda = new CarDirectory();
        int counter=0;
        for(Car c : carDirectory.getCarList())
        {   
            System.out.println("loop");
            if(c.getManufacturer().equals(company))
            {
                cda.addCarList(c);
                counter++;
                System.out.println("inside");
            }
        }
        if(counter==0)
        {   
            JOptionPane.showMessageDialog(null, "No Cars by manufacturer "+company);
        }
        else
        {
            carDirectory=cda;
            populateTable(carDirectory);
            statusLabel.setText("");
        }
    }

    private void carsManufYear(String year) {
        CarDirectory cda = new CarDirectory();
        int counter=0;
        for(Car c : carDirectory.getCarList())
        {
            if(c.getManufactureyear().split("-")[2].equals(year))
            {
               cda.addCarList(c);
                counter++;
            }
        }
        if(counter==0)
        {   
            JOptionPane.showMessageDialog(null, "No Cars manufactured in "+year);
        }
        else
        {
            carDirectory=cda;
            populateTable(carDirectory);
            statusLabel.setText("");
        }
    }

    private void minMaxSeat(int min, int max) {
       // currentAvailCars();

        CarDirectory cda = new CarDirectory();
        int counter=0;
        for(Car c : carDirectory.getCarList())
        {
            
            //Condition to get the available cars with the min and max seats given
            if( c.getAvailability() == true && c.getMinSeat()==min && c.getMaxSeat()>max)
            {
                cda.addCarList(c);
                counter++;
            }
        }
        if(counter==0)
        {   
            JOptionPane.showMessageDialog(null, "No Cars for matching criteria");
        }
        else
        {
            
            carDirectory=cda;
            populateTable(carDirectory);
            statusLabel.setText("");
        }
    }

    private void carSerNo(String serNo) {

          CarDirectory cda = new CarDirectory();
        int counter=0;
        for(Car c : carDirectory.getCarList())
        {
            if(c.getSerialNo().equals(serNo))
            {
                cda.addCarList(c);
                counter++;
//                Object[] ob= new Object[2];
//                ob[0]=cs;
//                ob[1]=cs.getAvailability();
//                dtm.addRow(ob);
                break;
            }
        }
        if(counter==0)
        {   
            JOptionPane.showMessageDialog(null, "No Cars for matching serial Number "+ serNo);
        }
        else{
            carDirectory=cda;
            populateTable(carDirectory);
            statusLabel.setText("");            
            
            Car car = (Car) displayCarJTable.getValueAt(0, 0);
            modelNametxt.setText(car.getModelName());
            modelNotxt.setText(car.getModelNo());
            minimumSeattxt.setText(Integer.toString(car.getMinSeat()));
            maximumSeattxt.setText(Integer.toString(car.getMaxSeat()));
            manufacturertxt.setText(car.getManufacturer());
            manufacturerYeartxt.setText(car.getManufactureyear());
            availableCitytxt.setText(car.getAvailableCity());
            maintainenceCerttxt.setText(car.getMaintainCert());
            serialNotxt.setText(car.getSerialNo());

            boolean avail = car.getAvailability();
            if (avail) {
                availableRadiobtn.setSelected(true);
            } else {
                unavailableRadiobtn.setSelected(true);
            }
            
            
            
            
            
        }
    }

    private void carsByModelNumber(String modl) {

        CarDirectory cda = new CarDirectory();
        int counter=0;
        for(Car c : carDirectory.getCarList())
        {
            if(c.getModelNo().equals(modl))
            {
                cda.addCarList(c);
                counter++;
            }
        }
        if(counter==0)
        {   
            JOptionPane.showMessageDialog(null, "No Cars by model name "+modl);
        }
        else
        {
            carDirectory=cda;
            populateTable(carDirectory);
            statusLabel.setText("");   
        }
    }

    private void carsByManufacturer() {

        DefaultTableModel dtm = (DefaultTableModel)displayCarJTable.getModel();
        dtm.setRowCount(0);
        CarDirectory cda = new CarDirectory();
        List<String> al = new ArrayList<>();
        for(Car c: carDirectory.getCarList())
        {
            al.add(c.getManufacturer());
           // cda.addCarList(c);
            //populateTable(cda);
            
        }
        Set<String> hs = new HashSet<>();
        hs.addAll(al);
        al.clear();
        al.addAll(hs);
        
        for(String all :al)
        {
            Object[] ob= new Object[2];
            ob[0]=all;
            ob[1]=false;
            dtm.addRow(ob);
            
        }
            
            
            statusLabel.setText("");  
    }

    private void carsInCity(String city) {
        CarDirectory cda = new CarDirectory();
        int counter=0;
        for(Car c : carDirectory.getCarList())
        {
            if(c.getAvailableCity().equals(city))
            {
                cda.addCarList(c);
                counter++;
            }
        }
        if(counter==0)
        {   
            JOptionPane.showMessageDialog(null, "No Cars in "+city);
        }
        else
        {
            carDirectory=cda;
            populateTable(carDirectory);
            statusLabel.setText("");   
        }
    }

    private void carsWithExpiredCert() {
        CarDirectory cda = new CarDirectory();
        int counter=0;
        for(Car c : carDirectory.getCarList())
        {
            String[] spdt=c.getMaintainCert().split("-");
            String extCert=spdt[2]+spdt[0]+spdt[1];
            if(Integer.parseInt(extCert)<Integer.parseInt(getDate()))
            {
                cda.addCarList(c);
                counter++;
            }
        }
        if(counter==0)
        {   
            JOptionPane.showMessageDialog(null, "No Cars Expired Certificate");
        }
        else
        {
            carDirectory=cda;
            populateTable(carDirectory);
            statusLabel.setText("");  
        }
    }
    private String getDate() {
        Date date=new Date();
        SimpleDateFormat ft = new SimpleDateFormat ("yyyyMMdd");
        return ft.format(date);
    }

    private void integerCheck(String checkThis, String fieldValue) {
    try{
            if(Double.parseDouble(checkThis)%1!=0)
            {
                error=1;
                JOptionPane.showMessageDialog(null, fieldValue +" should not be in fraction","ERROR",0);
            }
        }
        catch(Exception e){
            error=1;
            JOptionPane.showMessageDialog(null, fieldValue +" should be in Number format","ERR0R",0);      
        }
    }

    private void stringCheck(String checkThis, String fieldValue) {
      try{
         if(Double.valueOf(Double.parseDouble(checkThis))>=0)
            {
                error=1;
                JOptionPane.showMessageDialog(null,"Please enter "+fieldValue +" in proper format", "Error", 0);
            }
    }
      catch(Exception e){}
    }

   

    

}
